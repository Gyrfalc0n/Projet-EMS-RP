#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Apr 10, 2021 06:06:58 PM CEST  platform: Windows NT

import sys, os, random, math
from datetime import datetime
from tkinter import font
import tkinter.font as tkFont
from tkinter.constants import DISABLED, SOLID
from tkinter.scrolledtext import *
from tkinter import ttk
from tkinter import scrolledtext
from pypresence import Presence
import time
from theme import *

# VARIABLES DE CONFIGURATION
all_index = 1.0
SIZE_FONT = 20
DELAI = 1000
default_font = "TkDefaultFont"
default_size = 8
large_size = 10
font_default = (default_font, default_size)
font_large = (default_font, large_size)

def resource_path(relative_path):
        if hasattr(sys, '_MEIPASS'):
            return os.path.join(sys._MEIPASS, relative_path)
        return os.path.join(os.path.abspath("."), relative_path)

# VARIABLES DE FONCTIONNEMENT
is_detresse_respi1 = 0 # respirer
is_detresse_respi2 = 0 # sat
is_detresse_respi3 = 0 # FR
is_detresse_neuro = 0 # conscience
is_detresse_circu1 = 0 # FC
is_detresse_circu2 = 0 # TAG
is_detresse_circu3 = 0 # TAD
is_detresse_circu4 = 0 # TRC

is_detresse_circu = 0
is_detresse_neuro = 0
is_detresse_respi = 0

nombre_victime = 0
timer = int(time.time())

def get_nombre_victimes():
        global nombre_victime
        return "A traité " + str(nombre_victime) + " victimes"

def get_details_message():
        if is_detresse_circu and not is_detresse_respi and not is_detresse_neuro:
                message = "Détresse circulatoire"
                return message
        elif not is_detresse_circu and is_detresse_respi and not is_detresse_neuro:
                message = "Détresse respiratoire"
                return message
        elif not is_detresse_circu and not is_detresse_respi and is_detresse_neuro:
                message = "Détresse neurologique"
                return message
        if not is_detresse_circu and not is_detresse_respi and not is_detresse_neuro:
                message = "Aucune détresse vitale"
        else:
                message = "Plusieurs détresses vitales"
        return message
       

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import projet_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    projet_support.set_Tk_var()
    top = Toplevel1 (root)
    projet_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    projet_support.set_Tk_var()
    top = Toplevel1 (w)
    projet_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
#--------DISCORD RPC----------------------------------------------------------

        client_id = "841023891438043136"
        RPC = Presence(client_id)
        RPC.connect()
        buttons_list = [{"label": "🏥 Projet EMS RP","url": "https://ems.gyrfalcon.fr"},{"label": "⛑️ Discord","url": "https://discord.gg/2K2dzeFSDY"}]
        def update_presence():
                RPC.update(state=get_nombre_victimes(),
                           details=get_details_message(),
                           large_image="logo",
                           large_text="Projet EMS RP v0.2",
                           start=timer,
                           buttons=buttons_list)
                root.after(DELAI, update_presence)
#-----------------------------------------------------------------------------
        #MES FONCTIONS
        # getters

        def is_conscience():
                return projet_support.conscience.get()
        
        def is_respi():
                return projet_support.respire.get()

        def inter():
                return projet_support.inter.get()   
        
        def pup_taille():
                return projet_support.pup_taille.get()
        
        def pup_react():
                return projet_support.pup_react.get()

        def pup_sym():
                return projet_support.pup_sym.get()

        def espace():
                return projet_support.espace.get()

        def temps():
                return projet_support.temps.get()

        #setters

        def set_conscience(value):
                projet_support.conscience.set(value)
        
        def set_respi(value):
                projet_support.respire.set(value)

        def set_inter(value):
                projet_support.inter.set(value)   
        
        def set_pup_taille(value):
                projet_support.pup_taille.set(value)
        
        def set_pup_react(value):
                projet_support.pup_react.set(value)

        def set_pup_sym(value):
                projet_support.pup_sym.set(value)

        def set_espace(value):
                projet_support.espace.set(value)

        def set_temps(value):
                projet_support.temps.set(value)

        # detresses

        def detresse_circu():
                global is_detresse_circu
                if is_detresse_circu1 == 1 or is_detresse_circu2 == 1 or is_detresse_circu3 == 1 or is_detresse_circu4 == 1:
                        is_detresse_circu = 1
                else:
                        is_detresse_circu = 0

        def detresse_respi():
                global is_detresse_respi
                if is_detresse_respi1 == 1 or is_detresse_respi2 == 1 or is_detresse_respi3 == 1:
                        is_detresse_respi = 1
                else:
                        is_detresse_respi = 0

        def detresse_neuro():
                global is_detresse_neuro
                if is_detresse_neuro == 1:
                        is_detresse_neuro = 1
                else:
                        is_detresse_neuro = 0

        def blink_respi():
                if is_detresse_respi == 1:
                        if self.detresse_respi.cget("background") == "#c0c0c0":
                                self.detresse_respi.configure(background="#ff0000")     
                                self.detresse_respi.configure(foreground="white")
                        else:
                                self.detresse_respi.configure(background="#c0c0c0")     
                                self.detresse_respi.configure(foreground="black")
                else:
                        self.detresse_respi.configure(background="#c0c0c0")     
                        self.detresse_respi.configure(foreground="black")
                root.after(DELAI, blink_respi)

        def blink_neuro():
                if is_detresse_neuro == 1:
                        if self.Label1.cget("background") == "#c0c0c0":
                                self.Label1.configure(background="#ff0000")     
                                self.Label1.configure(foreground="white")       
                        else:
                                self.Label1.configure(background="#c0c0c0")     
                                self.Label1.configure(foreground="black")
                else:
                        self.Label1.configure(background="#c0c0c0")     
                        self.Label1.configure(foreground="black")
                root.after(DELAI, blink_neuro)

        def blink_circu():
                if is_detresse_circu == 1:
                        if self.detresse_circu.cget("background") == "#c0c0c0":
                                self.detresse_circu.configure(background="#ff0000")     
                                self.detresse_circu.configure(foreground="white") 
                        else:
                                self.detresse_circu.configure(background="#c0c0c0")     
                                self.detresse_circu.configure(foreground="black")
                else:
                        self.detresse_circu.configure(background="#c0c0c0")     
                        self.detresse_circu.configure(foreground="black")
                root.after(DELAI, blink_circu)


        def reset_detresses():
                self.detresse_respi.configure(background="#c0c0c0")     
                self.detresse_respi.configure(foreground="black")
                self.detresse_circu.configure(background="#c0c0c0")     
                self.detresse_circu.configure(foreground="black")
                self.Label1.configure(background="#c0c0c0")     
                self.Label1.configure(foreground="black")
                global is_detresse_respi
                global is_detresse_circu
                global is_detresse_neuro
                is_detresse_respi = 0
                is_detresse_circu = 0
                is_detresse_neuro = 0
                detresse_respi()
                detresse_circu()
                detresse_neuro()

        # FONCTION LOG

        def log(text):
                global all_index
                global is_detresse_neuro
                global is_detresse_respi1
                all_index += 1
                now = datetime.now() # current date and time
                date_time = now.strftime("%H:%M:%S > ")	
                self.log.insert(all_index, date_time + text + '\n')
                self.log.yview(all_index)
                #check state of neuro 
                if is_conscience() == 0:
                        is_detresse_neuro = 1
                else:
                        self.Label1.configure(background="#c0c0c0")     
                        self.Label1.configure(foreground="black")
                        is_detresse_neuro = 0
                if is_respi() == 0:
                        is_detresse_respi1 = 1
                else:
                        is_detresse_respi1 = 0
                detresse_respi()
                detresse_neuro()
                detresse_circu() #juste au cas ou

        #TODO : tention basse comme tension haute possible en cas de detresse circu !

        def tad():
                global is_detresse_circu3
                a_list = [7,8,9,10,11,12,13,14,15,16,17,18,19]
                distribution = [0.00326 , 0.00652 , 0.0125 , 0.025 , 0.15 , 0.5 , 0.15 , 0.075 , 0.0375 , 0.0175 , 0.015 , 0.003 , 0.00146]
                if inter() == 2 or inter() == 3 or inter() == 4 or inter() == 6:
                        distribution = distribution.reverse()
                random_number = random.choices(a_list, distribution)
                random_number = int(str(random_number)[1:-1])
                random_number2 = int(((random_number/2)*10 + 10) + random.randint(0,9))
                random_number = random_number*10 + random.randint(0,9)
                if random_number >= 145:
                        self.tad_text.configure(foreground="red")
                        is_detresse_circu3 = 1
                else:
                        is_detresse_circu3 = 0
                        self.tad_text.configure(foreground="black")
                tension = str(random_number) + "/" + str(random_number2)
                tension2 = "Mesure de la tension artérielle bras droit : " + str(random_number) + "/" + str(random_number2)
                self.tad_text.delete(1.0,"end")
                self.tad_text.insert(1.0, tension)
                log(tension2)

        def tag():
                global is_detresse_circu2
                a_list = [7,8,9,10,11,12,13,14,15,16,17,18,19]
                distribution = [0.00326 , 0.00652, 0.0125 , 0.025 , 0.15 , 0.5 , 0.15 , 0.075 , 0.0375 , 0.0175 , 0.015 , 0.003 , 0.00146]
                if inter() == 2 or inter() == 3 or inter() == 4 or inter() == 6:
                        distribution = distribution.reverse()
                random_number = random.choices(a_list, distribution)
                random_number = int(str(random_number)[1:-1])
                random_number2 = int(((random_number/2)*10 + 10) + random.randint(0,9))
                random_number = random_number*10 + random.randint(0,9)
                if random_number >= 145:
                        self.tag_text.configure(foreground="red")
                        is_detresse_circu2 = 1
                else:
                        self.tag_text.configure(foreground="black")
                        is_detresse_circu2 = 0
                tension = str(random_number) + "/" + str(random_number2)
                tension2 = "Mesure de la tension artérielle bras droit : " + str(random_number) + "/" + str(random_number2)
                self.tag_text.delete(1.0,"end")
                self.tag_text.insert(1.0, tension)
                log(tension2)

       #mesure fréquence cardiaque
        def fc():
                global is_detresse_circu1
                liste = [40,50,60,80,100]
                proba = [0.05,0.15,0.15,0.5,0.15]
                if inter() == 2 or inter() == 3 or inter() == 4 or inter() == 6:
                        proba = [0.05,0.10,0.2,0.3,0.35]
                fc = random.choices(liste, proba)
                fc = int(str(fc)[1:-1])
                if fc == 40:
                        fc = random.randint(40,50)
                if fc == 50:
                        fc = random.randint(50,60)
                if fc == 60:
                        fc = random.randint(60,80)
                if fc == 80:
                        fc = random.randint(80,100)
                if fc == 100:
                        fc = random.randint(100,150)
                message = str(fc) + " bpm/min"
                self.fc_text.delete(1.0,"end")
                self.fc_text.insert(1.0, message)
                if fc >= 100:
                        self.fc_text.configure(foreground="red")
                        is_detresse_circu1 = 1
                else:
                        self.fc_text.configure(foreground="black")
                        is_detresse_circu1 = 0
                message = "Fréquence cardiaque mesurée à : " + message
                log(message)

        #TODO : frequence respi basse comme haute en detresse respi !

        #mesure fréquence respiratoire
        def fr():
                global is_detresse_respi1
                liste = [10,15,20,25,30]
                proba = [0.05,0.15,0.15,0.5,0.15]
                if is_respi() == 0:
                        is_detresse_respi1 = 1
                        fr = 0
                        self.fr_text.configure(foreground="red")
                else:
                        self.fr_text.configure(foreground="black")
                        is_detresse_respi1 = 0
                        fr = random.choices(liste, proba)
                        fr = int(str(fr)[1:-1])
                        if fr == 10:
                                fr = random.randint(0,10)
                        if fr == 15:
                                fr = random.randint(10,15)
                        if fr == 20:
                                fr = random.randint(15,20)
                        if fr == 25:
                                fr = random.randint(20,25)
                        if fr == 30:
                                fr = random.randint(25,35)
                message = str(fr) + " mv/min"
                self.fr_text.delete(1.0,"end")
                self.fr_text.insert(1.0, message)
                message = "Fréquence respiratoire mesurée à : " + message
                log(message)

        #mesure saturation pulsatile o2
        def sat():
                global is_detresse_respi2
                liste = [80,83,87,90,93,96]
                proba = [0.00625,0.00625 ,0.0125 ,0.025 , 0.05, 0.9]
                if is_respi() == 0:
                        proba = [0.05,0.9 ,0.025 ,0.0125 , 0.0625, 0.0625]                    
                sat = random.choices(liste, proba)
                sat = int(str(sat)[1:-1])
                if sat == 96:
                        sat = random.randint(96,100)
                if sat == 93:
                        sat = random.randint(93,96)
                if sat == 90:
                        sat = random.randint(90,93)
                if sat == 87:
                        sat = random.randint(87,90)
                if sat == 83:
                        sat = random.randint(83,87)
                if sat == 80:
                        sat = random.randint(80,83)
                if sat <= 94:
                        self.sat_text.configure(foreground="red")
                        is_detresse_respi2 = 1
                else:
                        self.sat_text.configure(foreground="black")
                        is_detresse_respi2 = 0
                message = str(sat) + "%"
                self.sat_text.delete(1.0,"end")
                self.sat_text.insert(1.0, message)
                message = "SAT mesurée à : " + message   
                log(message)

        # mesure trc
        def trc():
                global is_detresse_circu4
                if inter() == 2 or inter() == 3 or inter() == 4 or inter() == 6:
                        message = "TRC supérieur à 2 secondes"
                        self.trc_text.delete(1.0,"end")
                        self.trc_text.insert(1.0,">2 sec")
                        is_detresse_circu4 = 1
                        self.trc_text.configure(foreground='red')
                else:
                        is_detresse_circu4 = 0
                        message = "TRC inférieur à 2 secondes"
                        self.trc_text.delete(1.0,"end")
                        self.trc_text.insert(1.0,"<2 sec")
                        self.trc_text.configure(foreground='black')
                log(message)

        def bilan_infos():
                if inter() == 0:
                        message = "Motif d'intervention : Malaise"
                elif inter() == 1:
                        message = "Motif d'intervention : Plaie simple"
                elif inter() == 2:
                        message = "Motif d'intervention : AVP"
                elif inter() == 3:
                        message = "Motif d'intervention : Plaie par balle"
                elif inter() == 4:
                        message = "Motif d'intervention : Plaie par arme blanche"
                elif inter() == 5:
                        message = "Motif d'intervention : Autre"
                elif inter() == 6:
                        message = "Motif d'intervention : Traumatisme"
                log(message)
                if is_conscience() == 1:
                        message = "A l'arrivée des secours, victime consciente"
                else:
                        message = "A l'arrivée des secours, victime inconsciente"
                log(message)
                if is_respi() == 1:
                        message = "A l'arrivée des secours, la victime respire"
                else:
                        message = "A l'arrivée des secours, la victime ne respire pas"
                log(message)
                if espace() == 1:
                        message = "Victime orientée dans l'espace"
                else:
                        message = "Victime désorientée dans l'espace"
                log(message)
                if temps() == 1:
                        message = "Victime orientée dans le temps"
                else:
                        message = "Victime désorientée dans le temps"
                log(message)
                if pup_taille() == 1:
                        message = "Pupilles mydriase (dillatées)"
                else:
                        message = "Pupilles myosis (taille normale)"
                log(message)
                if pup_react() == 1:
                        message = "Pupilles réactives"
                else:
                        message = "Pupilles non réactives"
                log(message)
                if pup_sym() == 1:
                        message = "Pupilles symétriques"
                else:
                        message = "Pupilles non symétriques"
                log(message)

        def envoyer():
                message = ""
                identite = self.identite_entry.get()
                tel = self.tel_entry.get()
                if identite != "":
                        message = "Identité : " + identite
                        
                if tel != "":
                        message = message + " \t\t | \t\t" + "Téléphone : " + tel
                log(message)
                bilan_infos()
                

        def envoyer_log():
                message = self.entry_log.get()
                log(str(message))
                self.entry_log.delete(0, 'end')


        def new():
                global is_detresse_respi1
                global is_detresse_respi2
                global is_detresse_respi3
                global is_detresse_neuro
                global is_detresse_circu1
                global is_detresse_circu2
                global is_detresse_circu3
                global is_detresse_circu4
                global is_detresse_circu
                global is_detresse_neuro
                global is_detresse_respi
                global nombre_victime
                nombre_victime += 1
                message = "------------------ Nouvelle victime ------------------"
                log(message)
                self.tel_entry.delete(0,'end')
                self.identite_entry.delete(0,'end')
                self.tag_text.delete(1.0,"end")
                self.tad_text.delete(1.0,"end")
                self.fr_text.delete(1.0,"end")
                self.fc_text.delete(1.0,"end")
                self.sat_text.delete(1.0,"end")
                self.trc_text.delete(1.0,"end")
                self.entry_log.delete(0, 'end')
                reset_detresses()
                set_conscience(1)
                set_respi(1)
                set_espace(1)
                set_temps(1)
                set_inter(0)
                set_pup_react(1)
                set_pup_sym(1)
                set_pup_taille(0)
                is_detresse_respi1 = 0 # respirer
                is_detresse_respi2 = 0 # sat
                is_detresse_respi3 = 0 # FR
                is_detresse_neuro = 0 # conscience
                is_detresse_circu1 = 0 # FC
                is_detresse_circu2 = 0 # TAG
                is_detresse_circu3 = 0 # TAD
                is_detresse_circu4 = 0 # TRC
                is_detresse_circu = 0
                is_detresse_neuro = 0
                is_detresse_respi = 0

        def option1():
                active_theme = default
        def option2():
                active_theme = light
        def option3():
                active_theme = dark
        def option4():
                a=1
        def option5():
                a=1
        def option6():
                a=1
        def option7():
                a=1
        def option8():
                a=1
        def option9():
                a=1
        def option10():
                a=1
# ---------------- THEMES -------------------------------------------------------------------------
        
        default = Default("#d9d9d9", "black")
        light = Light("white", "black")
        dark = Dark("black", "white")
        active_theme = default
        active_background = active_theme.background
        active_foreground = active_theme.foreground

#------------TKINTER PAGE AUTO GENERATED BUT MODIFIED----------------------------------------------
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
           
        root.iconbitmap(resource_path('ems.ico'))
        
        _bgcolor = active_background  # X11 color: 'gray85' '#d9d9d9'
        _fgcolor = active_foreground  # X11 color: 'black'
        
        _compcolor = active_background # X11 color: 'gray85' '#d9d9d9'
        _ana2color = active_background # Closest X11 color: 'gray92' '#ececec'
        self.style = ttk.Style()
        #if sys.platform == "win32":
        #self.style.theme_use('winnactive')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font=font_default)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("621x956+766+94")
        top.minsize(120, 1)
        top.maxsize(4484, 1421)
        top.resizable(1,  1)
        top.title("Projet EMS RP - version BETA")
        top.configure(background=active_background)
        top.configure(highlightbackground=active_background)
        top.configure(highlightbackground="black")

        self.titre = tk.Label(top)
        self.titre.place(relx=0.0, rely=0.0, height=31, width=624)
        self.titre.configure(activebackground="#f9f9f9")
        self.titre.configure(activeforeground="black")
        self.titre.configure(background="#fd0006")
        self.titre.configure(disabledforeground="#a3a3a3")
        self.titre.configure(font="-family {Segoe UI} -size 18 -weight bold")
        self.titre.configure(foreground="#ffffff")
        self.titre.configure(highlightbackground=active_background)
        self.titre.configure(highlightcolor="black")
        self.titre.configure(text='''PROJET EMS RP''')

        self.informations = tk.LabelFrame(top)
        self.informations.place(relx=0.016, rely=0.042, relheight=0.052
                , relwidth=0.968)
        self.informations.configure(relief='groove')
        self.informations.configure(foreground="black")
        self.informations.configure(text='''INFORMATIONS''')
        self.informations.configure(background=active_background)
        self.informations.configure(highlightbackground=active_background)
        self.informations.configure(highlightcolor="black")
        self.informations.configure(font=font_large)

        self.nouvelle_victime = ttk.Button(self.informations)
        self.nouvelle_victime.place(relx=0.017, rely=0.42, height=24, width=107
                , bordermode='ignore')
        self.nouvelle_victime.configure(command=new)
        self.nouvelle_victime.configure(text='''Nouvelle victime''')

        self.identite_entry = ttk.Entry(self.informations)
        self.identite_entry.place(relx=0.316, rely=0.4, height=20, relwidth=0.223
                , bordermode='ignore')
        self.identite_entry.configure(background="white")
        self.identite_entry.configure(font=("TkTextFont", 14))
        self.identite_entry.configure(foreground="#000000")

        self.identite = ttk.Label(self.informations)
        self.identite.place(relx=0.216, rely=0.4, height=15, width=54
                , bordermode='ignore')
        self.identite.configure(background=active_background)
        self.identite.configure(foreground="#000000")
        self.identite.configure(text='''Identité :''')

        self.tel = ttk.Label(self.informations)
        self.tel.place(relx=0.566, rely=0.4, height=15, width=74
                , bordermode='ignore')
        self.tel.configure(background=active_background)
        self.tel.configure(foreground="#000000")
        self.tel.configure(text='''N° téléphone :''')

        self.tel_entry = ttk.Entry(self.informations)
        self.tel_entry.place(relx=0.699, rely=0.4, height=20, relwidth=0.19
                , bordermode='ignore')
        self.tel_entry.configure(background="white")
        self.tel_entry.configure(font=("TkTextFont", 14))
        self.tel_entry.configure(foreground="#000000")

        self.new_ok_button = ttk.Button(self.informations)
        self.new_ok_button.place(relx=0.899, rely=0.4, height=24, width=47
                , bordermode='ignore')
        self.new_ok_button.configure(command=envoyer)
        self.new_ok_button.configure(text='''OK''')

        self.conscience = tk.LabelFrame(top)
        self.conscience.place(relx=0.016, rely=0.188, relheight=0.062
                , relwidth=0.501)
        self.conscience.configure(relief='groove')
        self.conscience.configure(foreground="black")
        self.conscience.configure(text='''CONSCIENCE''')
        self.conscience.configure(background=active_background)
        self.conscience.configure(highlightbackground=active_background)
        self.conscience.configure(highlightcolor="black")
        self.conscience.configure(font=font_large)

        self.conscience_oui = ttk.Radiobutton(self.conscience)
        self.conscience_oui.place(relx=0.418, rely=0.339, relheight=0.407
                , relwidth=0.186, bordermode='ignore')
        self.conscience_oui.configure(text='''OUI''')
        self.conscience_oui.configure(value="1")
        self.conscience_oui.configure(variable=projet_support.conscience)

        self.conscience_non = ttk.Radiobutton(self.conscience)
        self.conscience_non.place(relx=0.643, rely=0.339, relheight=0.407
                , relwidth=0.186, bordermode='ignore')
        self.conscience_non.configure(text='''NON''')
        self.conscience_non.configure(value="0")
        self.conscience_non.configure(variable=projet_support.conscience)

        self.respire = tk.LabelFrame(top)
        self.respire.place(relx=0.531, rely=0.188, relheight=0.062
                , relwidth=0.451)
        self.respire.configure(relief='groove')
        self.respire.configure(foreground="black")
        self.respire.configure(text='''RESPIRE''')
        self.respire.configure(background=active_background)
        self.respire.configure(highlightbackground=active_background)
        self.respire.configure(highlightcolor="black")
        self.respire.configure(font=font_large)

        self.respire_oui = ttk.Radiobutton(self.respire)
        self.respire_oui.place(relx=0.393, rely=0.322, relheight=0.407
                , relwidth=0.207, bordermode='ignore')
        self.respire_oui.configure(text='''OUI''')
        self.respire_oui.configure(value="1")
        self.respire_oui.configure(variable=projet_support.respire)

        self.resspire_non = ttk.Radiobutton(self.respire)
        self.resspire_non.place(relx=0.643, rely=0.322, relheight=0.407
                , relwidth=0.207, bordermode='ignore')
        self.resspire_non.configure(text='''NON''')
        self.resspire_non.configure(value="0")
        self.resspire_non.configure(variable=projet_support.respire)
        self.resspire_non.configure()

        self.respiratoire = tk.LabelFrame(top)
        self.respiratoire.place(relx=0.016, rely=0.262, relheight=0.159
                , relwidth=0.966)
        self.respiratoire.configure(relief='groove')
        self.respiratoire.configure(foreground="black")
        self.respiratoire.configure(text='''BILAN RESPIRATOIRE''')
        self.respiratoire.configure(background=active_background)
        self.respiratoire.configure(highlightbackground=active_background)
        self.respiratoire.configure(highlightcolor="black")
        self.respiratoire.configure(font=font_large)

        self.sat_button = ttk.Button(self.respiratoire)
        self.sat_button.place(relx=0.05, rely=0.204, height=44, width=107
                , bordermode='ignore')
        self.sat_button.configure(command=sat)
        self.sat_button.configure(text='''Mesurer la SAT''')

        self.sat_text = tk.Text(self.respiratoire)
        self.sat_text.place(relx=0.05, rely=0.546, relheight=0.237
                , relwidth=0.178, bordermode='ignore')
        self.sat_text.configure(background="white")
        self.sat_text.configure(font=("TkTextFont", 16))
        self.sat_text.configure(foreground="black")
        self.sat_text.configure(highlightbackground=active_background)
        self.sat_text.configure(foreground="black")
        self.sat_text.configure(insertbackground="black")
        self.sat_text.configure(selectbackground="blue")
        self.sat_text.configure(selectforeground="white")
        self.sat_text.configure(wrap="word")

        self.respi_button = ttk.Button(self.respiratoire)
        self.respi_button.place(relx=0.267, rely=0.204, height=44, width=107
                , bordermode='ignore')
        self.respi_button.configure(command=fr)
        self.respi_button.configure(text='''Mesurer la FR''')

        self.fr_text = tk.Text(self.respiratoire)
        self.fr_text.place(relx=0.267, rely=0.546, relheight=0.237
                , relwidth=0.178, bordermode='ignore')
        self.fr_text.configure(background="white")
        self.fr_text.configure(font=("TkTextFont", 14))
        self.fr_text.configure(foreground="black")
        self.fr_text.configure(highlightbackground=active_background)
        self.fr_text.configure(foreground="black")
        self.fr_text.configure(insertbackground="black")
        self.fr_text.configure(selectbackground="blue")
        self.fr_text.configure(selectforeground="white")
        self.fr_text.configure(wrap="word")

        self.TSeparator1 = ttk.Separator(self.respiratoire)
        self.TSeparator1.place(relx=0.52, rely=0.072, relheight=1.145
                , bordermode='ignore')
        self.TSeparator1.configure(orient="vertical")

        self.detresse_respi = tk.Label(self.respiratoire)
        self.detresse_respi.place(relx=0.55, rely=0.132, height=31, width=254
                , bordermode='ignore')
        self.detresse_respi.configure(activebackground="#f9f9f9")
        self.detresse_respi.configure(activeforeground="black")
        self.detresse_respi.configure(background="#c0c0c0")
        self.detresse_respi.configure(disabledforeground="#a3a3a3")
        self.detresse_respi.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.detresse_respi.configure(foreground="#000000")
        self.detresse_respi.configure(highlightbackground=active_background)
        self.detresse_respi.configure(highlightcolor="black")
        self.detresse_respi.configure(text='''DETRESSE RESPIRATOIRE''')

        self.detresse_circu = tk.Label(self.respiratoire)
        self.detresse_circu.place(relx=0.55, rely=0.395, height=31, width=254
                , bordermode='ignore')
        self.detresse_circu.configure(activebackground="#f9f9f9")
        self.detresse_circu.configure(activeforeground="black")
        self.detresse_circu.configure(background="#c0c0c0")
        self.detresse_circu.configure(disabledforeground="#a3a3a3")
        self.detresse_circu.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.detresse_circu.configure(foreground="#000000")
        self.detresse_circu.configure(highlightbackground=active_background)
        self.detresse_circu.configure(highlightcolor="black")
        self.detresse_circu.configure(text='''DETRESSE CIRCULATOIRE''')

        self.Label1 = tk.Label(self.respiratoire)
        self.Label1.place(relx=0.55, rely=0.658, height=31, width=254
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#c0c0c0")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground=active_background)
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''DETRESSE NEUROLOGIQUE''')
        
        self.circulatoire = tk.LabelFrame(top)
        self.circulatoire.place(relx=0.016, rely=0.429, relheight=0.18
                , relwidth=0.501)
        self.circulatoire.configure(relief='groove')
        self.circulatoire.configure(foreground="black")
        self.circulatoire.configure(text='''BILAN CIRCULATOIRE''')
        self.circulatoire.configure(background=active_background)
        self.circulatoire.configure(highlightbackground=active_background)
        self.circulatoire.configure(highlightcolor="black")
        self.circulatoire.configure(font=font_large)

        self.tag = ttk.Button(self.circulatoire)
        self.tag.place(relx=0.064, rely=0.174, height=34, width=137
                , bordermode='ignore')
        self.tag.configure(command=tag)
        self.tag.configure(text='''Mesurer TA Gauche''')

        self.tad = ttk.Button(self.circulatoire)
        self.tad.place(relx=0.547, rely=0.174, height=34, width=127
                , bordermode='ignore')
        self.tad.configure(command=tad)
        self.tad.configure(text='''Mesurer TA Droite''')

        self.tag_text = tk.Text(self.circulatoire)
        self.tag_text.place(relx=0.064, rely=0.407, relheight=0.14
                , relwidth=0.441, bordermode='ignore')
        self.tag_text.configure(background="white")
        self.tag_text.configure(font=("TkTextFont", 14))
        self.tag_text.configure(foreground="black")
        self.tag_text.configure(highlightbackground=active_background)
        self.tag_text.configure(foreground="black")
        self.tag_text.configure(insertbackground="black")
        self.tag_text.configure(selectbackground="blue")
        self.tag_text.configure(selectforeground="white")
        self.tag_text.configure(wrap="word")

        self.fc = ttk.Button(self.circulatoire)
        self.fc.place(relx=0.064, rely=0.587, height=34, width=137
                , bordermode='ignore')
        self.fc.configure(command=fc)
        self.fc.configure(text='''Mesurer FC''')

        self.tad_text = tk.Text(self.circulatoire)
        self.tad_text.place(relx=0.547, rely=0.407, relheight=0.14
                , relwidth=0.408, bordermode='ignore')
        self.tad_text.configure(background="white")
        self.tad_text.configure(font=("TkTextFont", 14))
        self.tad_text.configure(foreground="black")
        self.tad_text.configure(highlightbackground=active_background)
        self.tad_text.configure(foreground="black")
        self.tad_text.configure(insertbackground="black")
        self.tad_text.configure(selectbackground="blue")
        self.tad_text.configure(selectforeground="white")
        self.tad_text.configure(wrap="word")

        self.trc_button = ttk.Button(self.circulatoire)
        self.trc_button.place(relx=0.547, rely=0.581, height=34, width=127
                , bordermode='ignore')
        self.trc_button.configure(command=trc)
        self.trc_button.configure(text='''Mesurer TRC''')

        self.fc_text = tk.Text(self.circulatoire)
        self.fc_text.place(relx=0.064, rely=0.814, relheight=0.14, relwidth=0.441
                , bordermode='ignore')
        self.fc_text.configure(background="white")
        self.fc_text.configure(font=("TkTextFont", 14))
        self.fc_text.configure(foreground="black")
        self.fc_text.configure(highlightbackground=active_background)
        self.fc_text.configure(foreground="black")
        self.fc_text.configure(insertbackground="black")
        self.fc_text.configure(selectbackground="blue")
        self.fc_text.configure(selectforeground="white")
        self.fc_text.configure(wrap="word")

        self.trc_text = tk.Text(self.circulatoire)
        self.trc_text.place(relx=0.547, rely=0.814, relheight=0.14
                , relwidth=0.408, bordermode='ignore')
        self.trc_text.configure(background="white")
        self.trc_text.configure(font=("TkTextFont", 14))
        self.trc_text.configure(foreground="black")
        self.trc_text.configure(highlightbackground=active_background)
        self.trc_text.configure(foreground="black")
        self.trc_text.configure(insertbackground="black")
        self.trc_text.configure(selectbackground="blue")
        self.trc_text.configure(selectforeground="white")
        self.trc_text.configure(wrap="word")

        self.neuro = tk.LabelFrame(top)
        self.neuro.place(relx=0.531, rely=0.429, relheight=0.253, relwidth=0.451)
        self.neuro.configure(relief='groove')
        self.neuro.configure(foreground="black")
        self.neuro.configure(text='''BILAN NEUROLOGIQUE''')
        self.neuro.configure(background=active_background)
        self.neuro.configure(highlightbackground=active_background)
        self.neuro.configure(highlightcolor="black")
        self.neuro.configure(font=font_large)

        self.pupilles = tk.LabelFrame(self.neuro)
        self.pupilles.place(relx=0.036, rely=0.083, relheight=0.488
                , relwidth=0.929, bordermode='ignore')
        self.pupilles.configure(relief='groove')
        self.pupilles.configure(foreground="black")
        self.pupilles.configure(text='''Pupilles''')
        self.pupilles.configure(background=active_background)
        self.pupilles.configure(highlightbackground=active_background)
        self.pupilles.configure(highlightcolor="black")
        self.pupilles.configure(font=font_large)

        self.pup1 = ttk.Radiobutton(self.pupilles)
        self.pup1.place(relx=0.231, rely=0.144, relheight=0.178, relwidth=0.262
                , bordermode='ignore')
        self.pup1.configure(text='''Myosis''')
        self.pup1.configure(value="0")
        self.pup1.configure(variable=projet_support.pup_taille)

        self.pup12 = ttk.Radiobutton(self.pupilles)
        self.pup12.place(relx=0.577, rely=0.144, relheight=0.178, relwidth=0.338
                , bordermode='ignore')
        self.pup12.configure(text='''Mydriase''')
        self.pup12.configure(value="1")
        self.pup12.configure(variable=projet_support.pup_taille)

        self.pup2 = ttk.Radiobutton(self.pupilles)
        self.pup2.place(relx=0.231, rely=0.364, relheight=0.178, relwidth=0.3
                , bordermode='ignore')
        self.pup2.configure(text='''Réactives''')
        self.pup2.configure(value="1")
        self.pup2.configure(variable=projet_support.pup_react)

        self.pup22 = ttk.Radiobutton(self.pupilles)
        self.pup22.place(relx=0.577, rely=0.364, relheight=0.178, relwidth=0.338
                , bordermode='ignore')
        self.pup22.configure(text='''Aréactives''')
        self.pup22.configure(value="0")
        self.pup22.configure(variable=projet_support.pup_react)

        self.pup3 = ttk.Radiobutton(self.pupilles)
        self.pup3.place(relx=0.192, rely=0.576, relheight=0.186, relwidth=0.338
                , bordermode='ignore')
        self.pup3.configure(text='''Symétriques''')
        self.pup3.configure(value="1")
        self.pup3.configure(variable=projet_support.pup_sym)

        self.pup32 = ttk.Radiobutton(self.pupilles)
        self.pup32.place(relx=0.615, rely=0.576, relheight=0.186, relwidth=0.338
                , bordermode='ignore')
        self.pup32.configure(text='''Asymétriques''')
        self.pup32.configure(value="0")
        self.pup32.configure(variable=projet_support.pup_sym)

        self.oorientation = tk.LabelFrame(self.neuro)
        self.oorientation.place(relx=0.036, rely=0.579, relheight=0.393
                , relwidth=0.929, bordermode='ignore')
        self.oorientation.configure(relief='groove')
        self.oorientation.configure(foreground="black")
        self.oorientation.configure(text='''Orientation''')
        self.oorientation.configure(background=active_background)
        self.oorientation.configure(highlightbackground=active_background)
        self.oorientation.configure(highlightcolor="black")
        self.oorientation.configure(font=font_large)

        self.espace = ttk.Label(self.oorientation)
        self.espace.place(relx=0.077, rely=0.316, height=21, width=54
                , bordermode='ignore')
        self.espace.configure(background=active_background)
        self.espace.configure(foreground="#000000")
        self.espace.configure(text='''Espace''')

        self.temps = ttk.Label(self.oorientation)
        self.temps.place(relx=0.077, rely=0.632, height=21, width=54
                , bordermode='ignore')
        self.temps.configure(background=active_background)
        self.temps.configure(foreground="#000000")
        self.temps.configure(text='''Temps''')

        self.espace_oui = ttk.Radiobutton(self.oorientation)
        self.espace_oui.place(relx=0.385, rely=0.316, relheight=0.263
                , relwidth=0.223, bordermode='ignore')
        self.espace_oui.configure(text='''OUI''')
        self.espace_oui.configure(value="1")
        self.espace_oui.configure(variable=projet_support.espace)

        self.espace_non = ttk.Radiobutton(self.oorientation)
        self.espace_non.place(relx=0.654, rely=0.316, relheight=0.263
                , relwidth=0.223, bordermode='ignore')
        self.espace_non.configure(text='''NON''')
        self.espace_non.configure(value="0")
        self.espace_non.configure(variable=projet_support.espace)

        self.temps_oui = ttk.Radiobutton(self.oorientation)
        self.temps_oui.place(relx=0.385, rely=0.632, relheight=0.263
                , relwidth=0.223, bordermode='ignore')
        self.temps_oui.configure(text='''OUI''')
        self.temps_oui.configure(value="1")
        self.temps_oui.configure(variable=projet_support.temps)

        self.temps_non = ttk.Radiobutton(self.oorientation)
        self.temps_non.place(relx=0.654, rely=0.632, relheight=0.263
                , relwidth=0.223, bordermode='ignore')
        self.temps_non.configure(text='''NON''')
        self.temps_non.configure(value="0")
        self.temps_non.configure(variable=projet_support.temps)

        self.intervention = tk.LabelFrame(top)
        self.intervention.place(relx=0.016, rely=0.105, relheight=0.076
                , relwidth=0.966)
        self.intervention.configure(relief='groove')
        self.intervention.configure(foreground="black")
        self.intervention.configure(text='''INTERVENTION''')
        self.intervention.configure(background=active_background)
        self.intervention.configure(highlightbackground=active_background)
        self.intervention.configure(highlightcolor="black")
        self.intervention.configure(font=font_large)

        self.inter_0 = ttk.Radiobutton(self.intervention)
        self.inter_0.place(relx=0.017, rely=0.411, relheight=0.342
                , relwidth=0.097, bordermode='ignore')
        self.inter_0.configure(text='''Malaise''')
        self.inter_0.configure(value="0")
        self.inter_0.configure(variable=projet_support.inter)

        self.inter_1 = ttk.Radiobutton(self.intervention)
        self.inter_1.place(relx=0.133, rely=0.411, relheight=0.342
                , relwidth=0.147, bordermode='ignore')
        self.inter_1.configure(text='''Plaie simple''')
        self.inter_1.configure(value="1")
        self.inter_1.configure(variable=projet_support.inter)

        self.inter_2 = ttk.Radiobutton(self.intervention)
        self.inter_2.place(relx=0.283, rely=0.411, relheight=0.342
                , relwidth=0.113, bordermode='ignore')
        self.inter_2.configure(text='''AVP''')
        self.inter_2.configure(value="2")
        self.inter_2.configure(variable=projet_support.inter)

        self.inter_3 = ttk.Radiobutton(self.intervention)
        self.inter_3.place(relx=0.417, rely=0.137, relheight=0.342
                , relwidth=0.163, bordermode='ignore')
        self.inter_3.configure(text='''Plaie par balle''')
        self.inter_3.configure(value="3")
        self.inter_3.configure(variable=projet_support.inter)

        self.inter_4 = ttk.Radiobutton(self.intervention)
        self.inter_4.place(relx=0.417, rely=0.548, relheight=0.342, relwidth=0.23
                , bordermode='ignore')
        self.inter_4.configure(text='''Plaie par arme blanche''')
        self.inter_4.configure(value="4")
        self.inter_4.configure(variable=projet_support.inter)

        self.inter_5 = ttk.Radiobutton(self.intervention)
        self.inter_5.place(relx=0.833, rely=0.411, relheight=0.342
                , relwidth=0.147, bordermode='ignore')
        self.inter_5.configure(text='''Autre''')
        self.inter_5.configure(value="5")
        self.inter_5.configure(variable=projet_support.inter)

        self.inter_6 = ttk.Radiobutton(self.intervention)
        self.inter_6.place(relx=0.683, rely=0.411, relheight=0.342
                , relwidth=0.147, bordermode='ignore')
        self.inter_6.configure(text='''Traumatisme''')
        self.inter_6.configure(value="6")
        self.inter_6.configure(variable=projet_support.inter)

        self.entry_log = ttk.Entry(top)
        self.entry_log.place(relx=0.097, rely=0.962, height=20, relwidth=0.747)
        self.entry_log.configure(background="white")
        self.entry_log.configure(font="TkFixedFont")
        self.entry_log.configure(foreground="#000000")

        self.boutton_log = ttk.Button(top)
        self.boutton_log.place(relx=0.87, rely=0.962, height=24, width=67)
        self.boutton_log.configure(command=envoyer_log)
        self.boutton_log.configure(text='''OK''')

        self.label_entry = ttk.Label(top)
        self.label_entry.place(relx=0.016, rely=0.962, height=21, width=44)
        self.label_entry.configure(background=active_background)
        self.label_entry.configure(foreground="#000000")
        self.label_entry.configure(text='''Entrée :''')

        self.Label2 = ttk.Label(top)
        self.Label2.place(relx=0.016, rely=0.617, height=21, width=154)
        self.Label2.configure(background=active_background)
        self.Label2.configure(font="-family {Segoe UI} -size 9 -slant italic")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Gyrfalcon - version 0.3''')

        self.log = scrolledtext.ScrolledText(top)
        self.log.place(relx=0.016, rely=0.69, relheight=0.259, relwidth=0.628) #628
        self.log.configure(background="white")
        self.log.configure(font="TkTextFont")
        self.log.configure(foreground="black")
        self.log.configure(highlightbackground=active_background)
        self.log.configure(foreground="black")
        self.log.configure(insertbackground="black")
        self.log.configure(selectbackground="blue")
        self.log.configure(selectforeground="white")
        self.log.configure(wrap="word")

        self.options = tk.LabelFrame(top)
        self.options.place(relx=0.66, rely=0.69, relheight=0.256, relwidth=0.324)
        self.options.configure(relief='groove')
        self.options.configure(foreground="black")
        self.options.configure(text='''OPTIONS''')
        self.options.configure(background=active_background)
        self.options.configure(font=font_large)

        self.options.configure(relief='groove')
        self.options.configure(text='''OPTIONS''')

        self.option1 = ttk.Button(self.options)
        self.option1.place(relx=0.1, rely=0.122, height=34, width=77
                , bordermode='ignore')
        self.option1.configure(command=option1)
        self.option1.configure(text='''Option 1''')

        self.option2 = ttk.Button(self.options)
        self.option2.place(relx=0.547, rely=0.122, height=34, width=77
                , bordermode='ignore')
        self.option2.configure(command=option2)
        self.option2.configure(text='''Option 2''')

        self.option3 = ttk.Button(self.options)
        self.option3.place(relx=0.1, rely=0.286, height=34, width=77
                , bordermode='ignore')
        self.option3.configure(command=option3)
        self.option3.configure(text='''Option 3''')

        self.option5 = ttk.Button(self.options)
        self.option5.place(relx=0.1, rely=0.449, height=34, width=77
                , bordermode='ignore')
        self.option5.configure(command=option5)
        self.option5.configure(text='''Option 5''')

        self.option7 = ttk.Button(self.options)
        self.option7.place(relx=0.1, rely=0.612, height=34, width=77
                , bordermode='ignore')
        self.option7.configure(command=option7)
        self.option7.configure(text='''Option 7''')

        self.option9 = ttk.Button(self.options)
        self.option9.place(relx=0.1, rely=0.776, height=34, width=77
                , bordermode='ignore')
        self.option9.configure(command=option9)
        self.option9.configure(text='''Option 9''')

        self.option4 = ttk.Button(self.options)
        self.option4.place(relx=0.547, rely=0.286, height=34, width=77
                , bordermode='ignore')
        self.option4.configure(command=option4)
        self.option4.configure(text='''Option 4''')

        self.option6 = ttk.Button(self.options)
        self.option6.place(relx=0.547, rely=0.449, height=34, width=77
                , bordermode='ignore')
        self.option6.configure(command=option6)
        self.option6.configure(text='''Option 6''')

        self.option8 = ttk.Button(self.options)
        self.option8.place(relx=0.547, rely=0.612, height=34, width=77
                , bordermode='ignore')
        self.option8.configure(command=option8)
        self.option8.configure(text='''Option 8''')

        self.option10 = ttk.Button(self.options)
        self.option10.place(relx=0.547, rely=0.776, height=34, width=77
                , bordermode='ignore')
        self.option10.configure(command=option10)
        self.option10.configure(text='''Option 10''')

        # set default value at start
        now = datetime.now() # current date and time
        date_time = now.strftime("%d/%m/%y")	
        log("Le " + date_time)
        new()
        #blink scan for detresse
        blink_circu()
        blink_neuro()
        blink_respi()
        update_presence()

if __name__ == '__main__':
    vp_start_gui()





